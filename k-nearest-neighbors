import numpy as np
from collections import counter

def euclidean_distance(x1, x2):
    return np.sqrt(np.sum((x1-x2)**2))

class KNN:

    def __init__(self, k = 3):
        self.k = k


    def fit(self, X, Y):
        self.X_train = X
        self.y_train = Y


    # predict new samples
    def predict(self, X):
        predicted_labels = [self._predict(x) for x in X]
        return np.array(predicted_labels)

    # 4 features per sample
    # each label is {0, 1, 2}
    def _predict(self, x):
        # compute distances
        distances = [euclidean_distance(x, x_train) for x_train in self.X_train]

        # get k nearest neighbors, labels
        k_indices = np.argsort(distances)[:self.k] # sorts distances, returning indices of how it's sorted
        k_nearest_neighbors = [self.y_train[index] for index in k_indices]

        # majority vote
        most_common = counter(k_nearest_neighbors).most_common(1)
        return most_common[0][0]